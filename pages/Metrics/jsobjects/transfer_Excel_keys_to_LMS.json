{
  "unpublishedCollection": {
    "name": "transfer_Excel_keys_to_LMS",
    "pageId": "Metrics",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\ttransfer_keys: async () => {\n\t\tconsole.log('transfer Coupe');\n\t\tawait ExcelCoupeSelect.run();\n\t\tconst cdata = ExcelCoupeSelect.data.map(item => `('${item.Coupe}','${item.Date}')`).join(',');\n\t\tconsole.log(cdata);\n\t\tawait InsertCoupe.run({'data': cdata});\n\t\tawait ExcelFPPSelect.run();\n\t\tconst fdata = ExcelFPPSelect.data.map(item => `('${item.FPP}','${item.Expiry}')`).join(',');\n\t\tconsole.log(fdata);\n\t\tawait InsertFPP.run({'data': fdata});\n\t\tawait ExcelGradeSelect.run();\n\t\tconst gdata = ExcelGradeSelect.data.map(item => `('${item.Grade}')`).join(',');\n\t\tawait InsertGrade.run({'data':gdata});\n\t\tawait ExcelHarvestorSelect.run();\n\t\tconst hdata = ExcelHarvestorSelect.data.map(item => `('${item.Harvestor}')`).join(',');\n\t\tconsole.log(hdata);\n\t\tawait InsertHarvestor.run({'data':hdata});\n\t\tawait ExcelLengthSelect.run();\n\t\tconst ldata = ExcelLengthSelect.data.map(item => `('${item.Length}')`).join(',');\n\t\tconsole.log(ldata);\n\t\tawait InsertLengths.run({'data':ldata});\n\t\tawait ExcelOperationsSelect.run();\n\t\tconst odata = ExcelOperationsSelect.data.map(item => `('${item.Operations}','${item.Date}')`).join(',');\n\t\tconsole.log(odata);\n\t\tawait InsertOperations.run({'data':odata});\n\t\tawait ExcelSupplierSelect.run();\n\t\tconst sdata = ExcelSupplierSelect.data.map(item => `('${item.Supplier}')`).join(',');\n\t\tconsole.log(sdata);\n\t\tawait InsertSupplier.run({'data':sdata});\n\t\tawait ExcelLocationSelect.run();\n\t\tconst lodata = ExcelLocationSelect.data.map(item => `('${item.Location}','${item.Date}')`).join(',');\n\t\tconsole.log(lodata);\n\t\tawait InsertYardLocation.run({'data':lodata});\n\t\tshowAlert('Keys uploaded');\n\n\t\tawait ExcelFPPTableSelect.run();\n\t\tconst fppdata = ExcelFPPTableSelect.data.map(item => `(${Object.values(item).map(val => `'${val}'`).join(',')})`).join(',').replace(/'null'/g,'NULL');\n\t  console.log(fppdata);\n\t\tawait InsertFPPTable.run({'data': fppdata});\n\t\t\n\t\tshowAlert('FPP Table uploaded');\n\t\t\n\t\tawait ExcelReceivalsSelect.run();\n\t\tvar wb = [];\n\t\tvar iv_wb = [];\n\n\t\tExcelReceivalsSelect.data.forEach(function (entry) {\n\t\t\t\t\t\tif (entry.Docket != '' && entry.Supplier != '' && entry.Coupe != '' && entry.FPP != '' && entry.Harvestor != '' && entry.Operations != '')\t{\n\t\t\t\t\t\t\twb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + ')');\n\t\t\t\t\t\t}\telse {\n\t\t\t\t\t\t\tif (entry.Docket == '') {\n\t\t\t\t\t\t\t\tiv_wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + `,'docket missing')`);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tiv_wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + `,'missing data')`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t});\n\t\tif (wb.length > 0) InsertWeighBridge.run({'data':wb.join(',')});\n\t\tif (iv_wb.length > 0) InsertInvalidWeighbridge.run({'data':iv_wb.join(',')});\n\t\t\n\t\tshowAlert('Receivals Uploaded - starting scaling');\n\t\t\n\t\tawait ExcelScalingSelect.run();\n\t\tawait DocketSelect.run();\n\t\t\n\t\tconst docketset = new Set(DocketSelect.data.map(item => item.Docket));\n\t\tvar scale = [];\n\t\tvar reject = [];\n\t\tvar invalid = [];\n\n\t\tExcelScalingSelect.data.forEach(function (entry) {\n\t\t\t\t\t\tif (! docketset.has(parseInt(entry.Docket))) {\n\t\t\t\t\t\t\tif (entry.Status == 'Rejected') {\n\t\t\t\t\t\t\t\tinvalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, entry.Reason, entry.Status].map(val => `'${val}'`).join(',') + ')');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tinvalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, 'Docket Not Found', entry.Status].map(val => `'${val}'`).join(',') + ')');\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (entry.Status == 'Rejected')\t{\n\t\t\t\t\t\t\treject.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Date, entry.Reason].map(val => `'${val}'`).join(',') + ')');\n\t\t\t\t\t\t}\telse {\n\t\t\t\t\t\t\tscale.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date].map(val => `'${val}'`).join(',') + ')');\n\t\t\t\t\t\t} \n\t\t});\n\t\tshowAlert('Uploading Scaling');\n\t\tif (scale.length > 0) InsertScaling.run({'data':scale.join(',')});\n\t\tif (reject.length > 0) InsertRejectScaling.run({'data':reject.join(',')});\n\t\tif (invalid.length > 0) InsertInvalidScaling.run({'data':invalid.join(',')});\n\t}\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "Metrics_transfer_Excel_keys_to_LMS",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62f31d07624e841f0cc17f02"
}