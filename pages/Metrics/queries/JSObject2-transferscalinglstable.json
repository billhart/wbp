{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "transferscalinglstable",
    "fullyQualifiedName": "JSObject2.transferscalinglstable",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Metrics",
    "collectionId": "Metrics_JSObject2",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  await ExcelScalingSelect.run();\n  await DocketSelect.run();\n  const docketset = new Set(DocketSelect.data.map(item => item.Docket));\n  var scale = [];\n  var reject = [];\n  var invalid = [];\n  ExcelScalingSelect.data.forEach(function (entry) {\n    if (!docketset.has(parseInt(entry.Docket))) {\n      invalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, entry.Reason, 'docket not found'].map(val => `'${val}'`).join(',') + ')');\n    } else if (entry.Status == 'Rejected') {\n      reject.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Date, entry.Reason].map(val => `'${val}'`).join(',') + ')');\n    } else {\n      scale.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date].map(val => `'${val}'`).join(',') + ')');\n    }\n  });\n  if (scale.length > 0) InsertScaling.run({\n    'data': scale.join(',')\n  });\n  if (reject.length > 0) InsertRejectScaling.run({\n    'data': reject.join(',')\n  });\n  if (invalid.length > 0) InsertInvalidScaling.run({\n    'data': invalid.join(',')\n  });\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  await ExcelScalingSelect.run();\n  await DocketSelect.run();\n  const docketset = new Set(DocketSelect.data.map(item => item.Docket));\n  var scale = [];\n  var reject = [];\n  var invalid = [];\n  ExcelScalingSelect.data.forEach(function (entry) {\n    if (!docketset.has(parseInt(entry.Docket))) {\n      invalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, entry.Reason, 'docket not found'].map(val => `'${val}'`).join(',') + ')');\n    } else if (entry.Status == 'Rejected') {\n      reject.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Date, entry.Reason].map(val => `'${val}'`).join(',') + ')');\n    } else {\n      scale.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date].map(val => `'${val}'`).join(',') + ')');\n    }\n  });\n  if (scale.length > 0) InsertScaling.run({\n    'data': scale.join(',')\n  });\n  if (reject.length > 0) InsertRejectScaling.run({\n    'data': reject.join(',')\n  });\n  if (invalid.length > 0) InsertInvalidScaling.run({\n    'data': invalid.join(',')\n  });\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Metrics_JSObject2.transferscalinglstable",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_6385a4b84984012d5829c44b"
}