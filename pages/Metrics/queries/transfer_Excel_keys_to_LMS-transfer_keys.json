{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "transfer_keys",
    "fullyQualifiedName": "transfer_Excel_keys_to_LMS.transfer_keys",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Metrics",
    "collectionId": "Metrics_transfer_Excel_keys_to_LMS",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  console.log('transfer Coupe');\n  await ExcelCoupeSelect.run();\n  const cdata = ExcelCoupeSelect.data.map(item => `('${item.Coupe}','${item.Date}')`).join(',');\n  console.log(cdata);\n  await InsertCoupe.run({\n    'data': cdata\n  });\n  await ExcelFPPSelect.run();\n  const fdata = ExcelFPPSelect.data.map(item => `('${item.FPP}','${item.Expiry}')`).join(',');\n  console.log(fdata);\n  await InsertFPP.run({\n    'data': fdata\n  });\n  await ExcelGradeSelect.run();\n  const gdata = ExcelGradeSelect.data.map(item => `('${item.Grade}')`).join(',');\n  await InsertGrade.run({\n    'data': gdata\n  });\n  await ExcelHarvestorSelect.run();\n  const hdata = ExcelHarvestorSelect.data.map(item => `('${item.Harvestor}')`).join(',');\n  console.log(hdata);\n  await InsertHarvestor.run({\n    'data': hdata\n  });\n  await ExcelLengthSelect.run();\n  const ldata = ExcelLengthSelect.data.map(item => `('${item.Length}')`).join(',');\n  console.log(ldata);\n  await InsertLengths.run({\n    'data': ldata\n  });\n  await ExcelOperationsSelect.run();\n  const odata = ExcelOperationsSelect.data.map(item => `('${item.Operations}','${item.Date}')`).join(',');\n  console.log(odata);\n  await InsertOperations.run({\n    'data': odata\n  });\n  await ExcelSupplierSelect.run();\n  const sdata = ExcelSupplierSelect.data.map(item => `('${item.Supplier}')`).join(',');\n  console.log(sdata);\n  await InsertSupplier.run({\n    'data': sdata\n  });\n  await ExcelLocationSelect.run();\n  const lodata = ExcelLocationSelect.data.map(item => `('${item.Location}','${item.Date}')`).join(',');\n  console.log(lodata);\n  await InsertYardLocation.run({\n    'data': lodata\n  });\n  showAlert('Keys uploaded');\n  await ExcelFPPTableSelect.run();\n  const fppdata = ExcelFPPTableSelect.data.map(item => `(${Object.values(item).map(val => `'${val}'`).join(',')})`).join(',').replace(/'null'/g, 'NULL');\n  console.log(fppdata);\n  await InsertFPPTable.run({\n    'data': fppdata\n  });\n  showAlert('FPP Table uploaded');\n  await ExcelReceivalsSelect.run();\n  var wb = [];\n  var iv_wb = [];\n  ExcelReceivalsSelect.data.forEach(function (entry) {\n    if (entry.Docket != '' && entry.Supplier != '' && entry.Coupe != '' && entry.FPP != '' && entry.Harvestor != '' && entry.Operations != '') {\n      wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + ')');\n    } else {\n      if (entry.Docket == '') {\n        iv_wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + `,'docket missing')`);\n      } else {\n        iv_wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + `,'missing data')`);\n      }\n    }\n  });\n  if (wb.length > 0) InsertWeighBridge.run({\n    'data': wb.join(',')\n  });\n  if (iv_wb.length > 0) InsertInvalidWeighbridge.run({\n    'data': iv_wb.join(',')\n  });\n  showAlert('Receivals Uploaded - starting scaling');\n  await ExcelScalingSelect.run();\n  await DocketSelect.run();\n  const docketset = new Set(DocketSelect.data.map(item => item.Docket));\n  var scale = [];\n  var reject = [];\n  var invalid = [];\n  ExcelScalingSelect.data.forEach(function (entry) {\n    if (!docketset.has(parseInt(entry.Docket))) {\n      if (entry.Status == 'Rejected') {\n        invalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, entry.Reason, entry.Status].map(val => `'${val}'`).join(',') + ')');\n      } else {\n        invalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, 'Docket Not Found', entry.Status].map(val => `'${val}'`).join(',') + ')');\n      }\n    } else if (entry.Status == 'Rejected') {\n      reject.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Date, entry.Reason].map(val => `'${val}'`).join(',') + ')');\n    } else {\n      scale.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date].map(val => `'${val}'`).join(',') + ')');\n    }\n  });\n  showAlert('Uploading Scaling');\n  if (scale.length > 0) InsertScaling.run({\n    'data': scale.join(',')\n  });\n  if (reject.length > 0) InsertRejectScaling.run({\n    'data': reject.join(',')\n  });\n  if (invalid.length > 0) InsertInvalidScaling.run({\n    'data': invalid.join(',')\n  });\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  console.log('transfer Coupe');\n  await ExcelCoupeSelect.run();\n  const cdata = ExcelCoupeSelect.data.map(item => `('${item.Coupe}','${item.Date}')`).join(',');\n  console.log(cdata);\n  await InsertCoupe.run({\n    'data': cdata\n  });\n  await ExcelFPPSelect.run();\n  const fdata = ExcelFPPSelect.data.map(item => `('${item.FPP}','${item.Expiry}')`).join(',');\n  console.log(fdata);\n  await InsertFPP.run({\n    'data': fdata\n  });\n  await ExcelGradeSelect.run();\n  const gdata = ExcelGradeSelect.data.map(item => `('${item.Grade}')`).join(',');\n  await InsertGrade.run({\n    'data': gdata\n  });\n  await ExcelHarvestorSelect.run();\n  const hdata = ExcelHarvestorSelect.data.map(item => `('${item.Harvestor}')`).join(',');\n  console.log(hdata);\n  await InsertHarvestor.run({\n    'data': hdata\n  });\n  await ExcelLengthSelect.run();\n  const ldata = ExcelLengthSelect.data.map(item => `('${item.Length}')`).join(',');\n  console.log(ldata);\n  await InsertLengths.run({\n    'data': ldata\n  });\n  await ExcelOperationsSelect.run();\n  const odata = ExcelOperationsSelect.data.map(item => `('${item.Operations}','${item.Date}')`).join(',');\n  console.log(odata);\n  await InsertOperations.run({\n    'data': odata\n  });\n  await ExcelSupplierSelect.run();\n  const sdata = ExcelSupplierSelect.data.map(item => `('${item.Supplier}')`).join(',');\n  console.log(sdata);\n  await InsertSupplier.run({\n    'data': sdata\n  });\n  await ExcelLocationSelect.run();\n  const lodata = ExcelLocationSelect.data.map(item => `('${item.Location}','${item.Date}')`).join(',');\n  console.log(lodata);\n  await InsertYardLocation.run({\n    'data': lodata\n  });\n  showAlert('Keys uploaded');\n  await ExcelFPPTableSelect.run();\n  const fppdata = ExcelFPPTableSelect.data.map(item => `(${Object.values(item).map(val => `'${val}'`).join(',')})`).join(',').replace(/'null'/g, 'NULL');\n  console.log(fppdata);\n  await InsertFPPTable.run({\n    'data': fppdata\n  });\n  showAlert('FPP Table uploaded');\n  await ExcelReceivalsSelect.run();\n  var wb = [];\n  var iv_wb = [];\n  ExcelReceivalsSelect.data.forEach(function (entry) {\n    if (entry.Docket != '' && entry.Supplier != '' && entry.Coupe != '' && entry.FPP != '' && entry.Harvestor != '' && entry.Operations != '') {\n      wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + ')');\n    } else {\n      if (entry.Docket == '') {\n        iv_wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + `,'docket missing')`);\n      } else {\n        iv_wb.push('(' + Object.values(entry).map(val => `'${val}'`).join(',') + `,'missing data')`);\n      }\n    }\n  });\n  if (wb.length > 0) InsertWeighBridge.run({\n    'data': wb.join(',')\n  });\n  if (iv_wb.length > 0) InsertInvalidWeighbridge.run({\n    'data': iv_wb.join(',')\n  });\n  showAlert('Receivals Uploaded - starting scaling');\n  await ExcelScalingSelect.run();\n  await DocketSelect.run();\n  const docketset = new Set(DocketSelect.data.map(item => item.Docket));\n  var scale = [];\n  var reject = [];\n  var invalid = [];\n  ExcelScalingSelect.data.forEach(function (entry) {\n    if (!docketset.has(parseInt(entry.Docket))) {\n      if (entry.Status == 'Rejected') {\n        invalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, entry.Reason, entry.Status].map(val => `'${val}'`).join(',') + ')');\n      } else {\n        invalid.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date, 'Docket Not Found', entry.Status].map(val => `'${val}'`).join(',') + ')');\n      }\n    } else if (entry.Status == 'Rejected') {\n      reject.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Date, entry.Reason].map(val => `'${val}'`).join(',') + ')');\n    } else {\n      scale.push('(' + [entry.Log, entry.Docket, entry.Grade, entry.Length, entry.Diameter, entry.JAS, entry.Location, entry.Date].map(val => `'${val}'`).join(',') + ')');\n    }\n  });\n  showAlert('Uploading Scaling');\n  if (scale.length > 0) InsertScaling.run({\n    'data': scale.join(',')\n  });\n  if (reject.length > 0) InsertRejectScaling.run({\n    'data': reject.join(',')\n  });\n  if (invalid.length > 0) InsertInvalidScaling.run({\n    'data': invalid.join(',')\n  });\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Metrics_transfer_Excel_keys_to_LMS.transfer_keys",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_639d22138739830a9efbfad0"
}