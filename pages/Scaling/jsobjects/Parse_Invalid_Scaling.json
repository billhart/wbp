{
  "unpublishedCollection": {
    "name": "Parse_Invalid_Scaling",
    "pageId": "Scaling",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tload_data: async () => {\n\t\tconsole.log(\"queries on the bus\");\n\t\tawait Select_IScaling_All.clear();\n\t\tawait Select_IScaling_All.run();\n\t\t//await Logs.run();\n\t\t//await ILogs.run();\n\t\t//await RLogs.run();\n\t\t//await Location.run();\n\t\t//await Lengths.run();\n\t\t//await Dockets.run();\n\t\t//await Grade.run();\n\t\treturn 'success'\n  },\n\treload_tables: async () => {\n\t\tconsole.log('reloading tables');\n\t\tawait VScaling.run();\n\t\tawait IScaling.run();\n\t\tawait RejectScaling.run();\n\t\tawait Invalid_Dockets.clear();\n\t\tawait Invalid_Dockets.run();\n\t\tawait Count_Scaling.run();\n\t\treturn 'success'\n\t},\n\tload_logids: async () => {\n\t\tconsole.log('loading log ids');\n\t\tawait Logs.clear();\n\t\tawait Logs.run();\n\t\tawait ILogs.clear();\n\t\tawait ILogs.run();\n\t\tawait RLogs.clear();\n\t\tawait RLogs.run();\n\t},\t\n\t\n\tparse_data: async () => {\n       try {\n\t\t\t\t\t const scale_data = Select_IScaling_All.data;\n\t\t\t\t\t const docket_set = new Set(Dockets.data.map(item => item.Docket));\n\t\t\t\t\t const log_set = new Set(Logs.data.map(item => item.Log));\n\t\t\t\t\t const rlog_set = new Set(RLogs.data.map(item => item.Log));\n\t\t\t\t\t const grade_set = new Set(Grade.data.map(item => item.Grade));\n\t\t\t\t\t const length_set = new Set(Lengths.data.map(item => item.Lengths));\n\t\t\t\t\t const location_set = new Set(Location.data.map(item => item.Location));\n\n\t\t\t\t \tconsole.log(\"starting\");\n\t\t\t\t //console.log(log_set);\n\n            const{\n                del_log,\n\t\t\t\t\t\t\t  rejected,\n                scale,\n            } = scale_data.reduce(\n                (acc, sr) => {\n\t\t\t\t\t\t\t\t\t\tconst logs_to_go = () => acc.del_log.push([sr.Log]);\n                    const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n\t\t\t\t\t\t\t\t\t  const rejects = () => {\n\t\t\t\t\t\t\t\t\t\t\t\tif ( ! rlog_set.has(sr.Log) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t  console.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.rejected.length);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tacc.rejected.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Date, sr.Reason]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.rejected.length);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tconsole.log(sr);\n                    if ( ! log_set.has(sr.Log) ) {\n\t\t\t\t\t\t\t\t\t\t\t  if (sr.Status === 'Rejected') {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('rejecting');\n\t\t\t\t\t\t\t\t\t\t\t\t\trejects();\n\t\t\t\t\t\t\t\t\t\t\t\t} else if ( (! location_set.has(sr.Location)) || (sr.Location === 'TEST')) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(sr.Location)\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogs_to_go();\n                        } else if (isNaN(sr.Docket)) {\n                        } else if ( ! docket_set.has(parseInt(sr.Docket))) {\n                        } else if ((sr.Diameter < 16) || (sr.Diameter > 48) || isNaN(sr.Diameter)) {\n                        } else if ( ! length_set.has(sr.Length) ) {\n                        } else if ( ! (grade_set.has(sr.Grade)) ) {\n                        } else {\n                            valid();\n\t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(\"valid\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogs_to_go()\n                        }\n                    } else {\n                        logs_to_go();\n\t\t\t\t\t\t\t\t\t\t\t  console.log(\"to be deleted\",sr.Log);\n                    }\n                    return acc;\n                },\n                {\n                    scale: [],\n                    del_log: [],\n\t\t\t\t\t\t\t\t\t  rejected: [],\n                }\n            );\n\n\n            console.log(\"processed\",scale.length,del_log.length);\n\t\t\t\t\t if (rejected.length > 0) {\n\t\t\t\t\t\t const rdata = rejected.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t //console.log(data.l);\n\t\t\t\t\t\t await Insert_Reject_VScaling.run({'data': rdata})\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Reject Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch(() => showAlert(\"Error inserting Rejects\",'error'));\t\t\t\t\t\t \n\t\t\t\t\t }\n\t\t\t\t   if (scale.length > 0) {\n\t\t\t\t\t\t const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t //console.log(data.l);\n\t\t\t\t\t\t await Insert_VScaling.run({'data': data})\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Valid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch(() => showAlert(\"Error inserting Valid\",'error'));\n\t\t\t\t\t }\n\t\t\t\t   if (del_log.length > 0) {\n\t\t\t\t\t\t const idata = del_log.map(val => `'${val}'`).join(',');\n\t\t\t\t\t\t //console.log(idata)\n\t\t\t\t\t\t await Delete_Invalid_ScalingRows.run({'data': idata })\n\t\t\t\t\t\t\t .then(() => showAlert(\"Deleted Invalid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch(() => showAlert(\"Error deleteing invalid\",'error'));\n\t\t\t\t\t }\n\n\t\t\t\t  return('success');\n\n        } catch (error) {\n            showAlert(error,'error')\n        }\n\t}\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "Scaling_Parse_Invalid_Scaling",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62d9fbe85a06d81bded2fe16"
}