{
  "unpublishedCollection": {
    "name": "Parse_Raw_Scaling",
    "pageId": "Scaling",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tparse_data: async () => {\n       try {\n\t\t\t\t   console.log(\"starting\");\n\t\t\t\t \t await Select_Raw_Scaling.run();\n\t\t\t\t   const scale_data = Select_Raw_Scaling.data;\n\t\t\t\t \t console.log(\"got raw scaling\");\n\t\t\t\t\t await Logs.run();\n\t\t\t\t\t const log_set = new Set(Logs.data.map(item => item.Log));\n\t\t\t\t   console.log(\"got Logs\");\n\t\t\t\t\t await ILogs.run();\n\t\t\t\t\t const ilog_set = new Set(ILogs.data.map(item => item.Log));\n\t\t\t\t   console.log(\"got ILogs\");\n\t\t\t\t\t await RLogs.run();\n\t\t\t\t\t const rlog_set = new Set(RLogs.data.map(item => item.Log));\n\t\t\t\t   console.log(\"got RLogs\");\n\t\t\t\t\t await Lengths.run();\n\t\t\t\t\t const len_set = new Set(Lengths.data.map(item => item.Lengths));\n\t\t\t\t   console.log(\"got Lengths\");\n\t\t\t\t\t await Dockets.run();\n\t\t\t\t\t const docket_set = new Set(Dockets.data.map(item => item.Docket));\n\t\t\t\t   console.log(\"got Dockets\");\n\t\t\t\t\t await Grade.run();\n\t\t\t\t\t const grade_set = new Set(Grade.data.map(item => item.Grade));\n\t\t\t\t   console.log(\"got Grades\");\n\t\t\t\t\t await Location.run();\n\t\t\t\t\t const location_set = new Set(Location.data.map(item => item.Location));\n\t\t\t\t   console.log(\"got Locations\");\n\n\t\t\t\t\t const new_Location = new Set();\n\t\t\t\t\t const new_Location_Added = {};\n\n\t\t\t\t\t console.log(\"data loaded\");\n\t\t\t\t   //console.log(len_set);\n\n\t\t\t\t\t const{\n\t\t\t\t\t\t iv_scale,\n\t\t\t\t\t\t scale,\n\t\t\t\t\t\t reject,\n\t\t\t\t\t } = scale_data.reduce(\n\t\t\t\t\t\t (acc, sr) => {\n\t\t\t\t\t\t\t const invalid = reason => {\n\t\t\t\t\t\t\t\t if ( ! ilog_set.has(sr.Log) ) {\n\t\t\t\t\t\t\t\t\t sr.Reason += reason;\n\t\t\t\t\t\t\t\t\t acc.iv_scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date, sr.Reason]);\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t };\n\t\t\t\t\t\t\t const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n\t\t\t\t\t\t\t const reject = () => {\n\t\t\t\t\t\t\t\t  if ( ! rlog_set.has(sr.Log) ) {\n\t\t\t\t\t\t\t\t\t\t\tacc.reject.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Date, sr.Reason]);\n\t\t\t\t\t\t\t\t\t\t\t//console.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.reject.length);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t };\n\t\t\t\t\t\t\t //console.log(sr.Docket);\n\t\t\t\t\t\t\t sr.Log = parseInt(sr.Log.replace(/\\D/g,''));\n\t\t\t\t\t\t\t if ( ! log_set.has(sr.Log) ) {\n\t\t\t\t\t\t\t\t sr.Date = sr.Date.split('-').reverse().join(\"-\");\n\t\t\t\t\t\t\t\t sr.Location = sr.Location.replace(/ /g,'').toUpperCase();\n\t\t\t\t\t\t\t\t sr.Location = sr.Location.slice(0,4) + \" \" + sr.Location.slice(-3);\n\t\t\t\t\t\t\t\t //console.log(sr.Location);\n\t\t\t\t\t\t\t\t if ( ! location_set.has(sr.Location) && sr.Location && sr.Location != 'TEST' && sr.Location != 'REJE TED') {\n\t\t\t\t\t\t\t\t\t\t\tnew_Location.add(sr.Location);\n\t\t\t\t\t\t\t\t\t\t\tnew_Location_Added[sr.Location] = sr.Date;\n\t\t\t\t\t\t\t\t\t    location_set.add(sr.Location);\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t //console.log(sr.Date);\n\t\t\t\t\t\t\t\t if (isNaN(sr.Docket)) {\n\t\t\t\t\t\t\t\t\t //console.log(\"docket format\");\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Docket Format\")\n\t\t\t\t\t\t\t\t } else if ( ! docket_set.has(parseInt(sr.Docket))) {\n\t\t\t\t\t\t\t\t\t //console.log(sr.Docket);\n\t\t\t\t\t\t\t\t\t //console.log('docket not found');\n\t\t\t\t\t\t\t\t\t invalid(\" Docket Not Found\") \n\t\t\t\t\t\t\t\t } else if (sr.Status === 'Rejected') {\n\t\t\t\t\t\t\t\t\t //console.log(\"rejected\");\n\t\t\t\t\t\t\t\t\t reject()\n\t\t\t\t\t\t\t\t } else if ( (! location_set.has(sr.Location)) || (sr.Location === 'TEST')) {\n\t\t\t\t\t\t\t\t\t //console.log(\"location\");\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Location\")\n\t\t\t\t\t\t\t\t } else if ((sr.Diameter < 16) || (sr.Diameter > 50) || isNaN(sr.Diameter)) {\n\t\t\t\t\t\t\t\t\t //console.log(\"Diameter\")\n\t\t\t\t\t\t\t\t\t invalid(' Diameter out of range or NaN')\n\t\t\t\t\t\t\t\t } else if ( ! len_set.has(sr.Length.toString()) ) {\n\t\t\t\t\t\t\t\t\t //console.log(\"Length\",sr.Length)\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Length\",sr.Length)\n\t\t\t\t\t\t\t\t } else if ( ! (grade_set.has(sr.Grade)) ) {\n\t\t\t\t\t\t\t\t\t //console.log(\"grade\")\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Grade\")\n\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t //console.log(\"valid\", sr.Log, log_set.has(sr.Log));\n\t\t\t\t\t\t\t\t\t valid()\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t showAlert(\"Duplicate Log \" + sr.Log.toString(),'error');\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t return acc;\n\t\t\t\t\t\t },\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t scale: [],\n\t\t\t\t\t\t\t iv_scale: [],\n\t\t\t\t\t\t\t reject: [],\n\t\t\t\t\t\t }\n\t\t\t\t\t );\n\t\t\t\t\t console.log(\"finished processing\");\n\n\t\t\t\t   if (new_Location.size) {\n                const location_data = Array.from(new_Location).map(item => `('${item}','','${new_Location_Added[item]}')`).join(',').replace(/''/g,'NULL');\n\t\t\t\t\t\t\t  //console.log(\"New Locations\",location_data);\t\t\t\t\t\t\t\n                Insert_Yard.run({'data': location_data})\n\t\t\t\t\t\t \t\t\t.then(() => showAlert(\"Inserted New Locations ${location_data}\", 'success'))\n\t\t\t\t\t\t      .error((error) => showAlert(error,'error'));\n\t\t\t\t\t\t    Location.run();\n\t\t\t\t\t\t  console.log(\"Inserted Locations\");\n\t\t\t\t\t }\n\n\t\t\t\t   if (scale.length > 0) {\n\t\t\t\t\t\t const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t console.log('Valid :',scale.length);\n\t\t\t\t\t\t Insert_VScaling.run({'data': data})\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Valid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch(() => showAlert(\"Error in adding Valid\",'error'));\n\t\t\t\t\t }\n\t\t\t\t   if (iv_scale.length > 0) {\n\t\t\t\t\t\t const idata = iv_scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t console.log('Invalid: ', iv_scale.length);\n\t\t\t\t\t\t Insert_Invalid_Scaling.run({'data': idata })\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Invalid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch(() => showAlert(\"Error in adding invalid\",'error'));\n\t\t\t\t\t }\n\t\t\t\t   if (reject.length > 0) {\n\t\t\t\t\t\t const rdata = reject.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t console.log('Rejects : ',reject.length);\n\t\t\t\t\t\t Insert_Reject_Scaling.run({'data': rdata})\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Reject Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch(() => showAlert(\"Error in adding reject\",'error'));\n\t\t\t\t\t }\n\t\t\t\t   console.log(\"recounting totals\");\n\t\t\t\t   await VScaling.run();\n\t\t\t\t\t await IScaling.run();\n\t\t\t\t   await RejectScaling.run();\n\t\t\t\t   await docket_table.run();\n\t\t\t\t   Count_Scaling.run();\n\n\t\t\t\t   return 'success';\n\n\t\t\t\t } catch (error) {\n\t\t\t\t\t showAlert(\"Processing Error\",'error');\n\t\t\t\t\t return Error();\n\t\t\t\t }\n\t}\n}",
    "variables": []
  },
  "id": "Scaling_Parse_Raw_Scaling",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62d9fb875a06d81bded2fe07"
}