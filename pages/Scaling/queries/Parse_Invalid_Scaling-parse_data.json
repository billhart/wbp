{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "parse_data",
    "fullyQualifiedName": "Parse_Invalid_Scaling.parse_data",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Scaling",
    "collectionId": "Scaling_Parse_Invalid_Scaling",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  try {\n    const scale_data = Select_IScaling_All.data;\n    const docket_set = new Set(Dockets.data.map(item => item.Docket));\n    const log_set = new Set(Logs.data.map(item => item.Log));\n    const rlog_set = new Set(RLogs.data.map(item => item.Log));\n    const grade_set = new Set(Grade.data.map(item => item.Grade));\n    const length_set = new Set(Lengths.data.map(item => item.Lengths));\n    const location_set = new Set(Location.data.map(item => item.Location));\n    console.log(\"starting\");\n    const {del_log, rejected, scale} = scale_data.reduce((acc, sr) => {\n      const logs_to_go = () => acc.del_log.push([sr.Log]);\n      const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n      const rejects = () => {\n        if (!rlog_set.has(sr.Log)) {\n          console.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.rejected.length);\n          acc.rejected.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Date, sr.Reason]);\n          console.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.rejected.length);\n        }\n      };\n      console.log(sr);\n      if (!log_set.has(sr.Log)) {\n        if (sr.Status === 'Rejected') {\n          console.log('rejecting');\n          rejects();\n        } else if (!location_set.has(sr.Location) || sr.Location === 'TEST') {\n          console.log(sr.Location);\n          logs_to_go();\n        } else if (isNaN(sr.Docket)) {} else if (!docket_set.has(parseInt(sr.Docket))) {} else if (sr.Diameter < 16 || sr.Diameter > 48 || isNaN(sr.Diameter)) {} else if (!length_set.has(sr.Length)) {} else if (!grade_set.has(sr.Grade)) {} else {\n          valid();\n          console.log(\"valid\");\n          logs_to_go();\n        }\n      } else {\n        logs_to_go();\n        console.log(\"to be deleted\", sr.Log);\n      }\n      return acc;\n    }, {\n      scale: [],\n      del_log: [],\n      rejected: []\n    });\n    console.log(\"processed\", scale.length, del_log.length);\n    if (rejected.length > 0) {\n      const rdata = rejected.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      await Insert_Reject_VScaling.run({\n        'data': rdata\n      }).then(() => showAlert(\"Found Reject Scaling Entires\", 'success')).catch(() => showAlert(\"Error inserting Rejects\", 'error'));\n    }\n    if (scale.length > 0) {\n      const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      await Insert_VScaling.run({\n        'data': data\n      }).then(() => showAlert(\"Found Valid Scaling Entires\", 'success')).catch(() => showAlert(\"Error inserting Valid\", 'error'));\n    }\n    if (del_log.length > 0) {\n      const idata = del_log.map(val => `'${val}'`).join(',');\n      await Delete_Invalid_ScalingRows.run({\n        'data': idata\n      }).then(() => showAlert(\"Deleted Invalid Scaling Entires\", 'success')).catch(() => showAlert(\"Error deleteing invalid\", 'error'));\n    }\n    return 'success';\n  } catch (error) {\n    showAlert(error, 'error');\n  }\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  try {\n    const scale_data = Select_IScaling_All.data;\n    const docket_set = new Set(Dockets.data.map(item => item.Docket));\n    const log_set = new Set(Logs.data.map(item => item.Log));\n    const rlog_set = new Set(RLogs.data.map(item => item.Log));\n    const grade_set = new Set(Grade.data.map(item => item.Grade));\n    const length_set = new Set(Lengths.data.map(item => item.Lengths));\n    const location_set = new Set(Location.data.map(item => item.Location));\n    console.log(\"starting\");\n    const {del_log, rejected, scale} = scale_data.reduce((acc, sr) => {\n      const logs_to_go = () => acc.del_log.push([sr.Log]);\n      const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n      const rejects = () => {\n        if (!rlog_set.has(sr.Log)) {\n          console.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.rejected.length);\n          acc.rejected.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Date, sr.Reason]);\n          console.log('adding reject ', sr.Log, rlog_set.has(sr.Log), acc.rejected.length);\n        }\n      };\n      console.log(sr);\n      if (!log_set.has(sr.Log)) {\n        if (sr.Status === 'Rejected') {\n          console.log('rejecting');\n          rejects();\n        } else if (!location_set.has(sr.Location) || sr.Location === 'TEST') {\n          console.log(sr.Location);\n          logs_to_go();\n        } else if (isNaN(sr.Docket)) {} else if (!docket_set.has(parseInt(sr.Docket))) {} else if (sr.Diameter < 16 || sr.Diameter > 48 || isNaN(sr.Diameter)) {} else if (!length_set.has(sr.Length)) {} else if (!grade_set.has(sr.Grade)) {} else {\n          valid();\n          console.log(\"valid\");\n          logs_to_go();\n        }\n      } else {\n        logs_to_go();\n        console.log(\"to be deleted\", sr.Log);\n      }\n      return acc;\n    }, {\n      scale: [],\n      del_log: [],\n      rejected: []\n    });\n    console.log(\"processed\", scale.length, del_log.length);\n    if (rejected.length > 0) {\n      const rdata = rejected.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      await Insert_Reject_VScaling.run({\n        'data': rdata\n      }).then(() => showAlert(\"Found Reject Scaling Entires\", 'success')).catch(() => showAlert(\"Error inserting Rejects\", 'error'));\n    }\n    if (scale.length > 0) {\n      const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      await Insert_VScaling.run({\n        'data': data\n      }).then(() => showAlert(\"Found Valid Scaling Entires\", 'success')).catch(() => showAlert(\"Error inserting Valid\", 'error'));\n    }\n    if (del_log.length > 0) {\n      const idata = del_log.map(val => `'${val}'`).join(',');\n      await Delete_Invalid_ScalingRows.run({\n        'data': idata\n      }).then(() => showAlert(\"Deleted Invalid Scaling Entires\", 'success')).catch(() => showAlert(\"Error deleteing invalid\", 'error'));\n    }\n    return 'success';\n  } catch (error) {\n    showAlert(error, 'error');\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Scaling_Parse_Invalid_Scaling.parse_data",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62d9fbe85a06d81bded2fe14"
}