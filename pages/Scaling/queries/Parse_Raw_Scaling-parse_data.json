{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "parse_data",
    "fullyQualifiedName": "Parse_Raw_Scaling.parse_data",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Scaling",
    "collectionId": "Scaling_Parse_Raw_Scaling",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  try {\n    await Select_Raw_Scaling.run();\n    const scale_data = Select_Raw_Scaling.data;\n    await Logs.run();\n    const log_set = new Set(Logs.data.map(item => item.Log));\n    await Lengths.run();\n    const len_set = new Set(Lengths.data.map(item => item.Lengths));\n    await Dockets.run();\n    const docket_set = new Set(Dockets.data.map(item => item.Docket));\n    await Grade.run();\n    const grade_set = new Set(Grade.data.map(item => item.Grade));\n    await Location.run();\n    const location_set = new Set(Location.data.map(item => item.Location));\n    const new_Location = new Set();\n    const new_Location_Added = {};\n    console.log(\"starting\");\n    const {iv_scale, scale, reject} = scale_data.reduce((acc, sr) => {\n      const invalid = reason => {\n        sr.Reason += reason;\n        acc.iv_scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date, sr.Reason]);\n      };\n      const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n      const reject = () => acc.reject.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Date, sr.Reason]);\n      if (!log_set.has(sr.Log)) {\n        sr.Date = sr.Date.split('-').reverse().join(\"-\");\n        sr.Location = sr.Location.replace(/ /g, '').toUpperCase();\n        sr.Location = sr.Location.substring(0, 4) + \" \" + sr.Location.substring(4);\n        if (!location_set.has(sr.Location) && sr.Location && sr.Location != 'TEST' && sr.Location != 'REJE CTED') {\n          new_Location.add(sr.Location);\n          new_Location_Added[sr.Location] = sr.Date;\n          location_set.add(sr.Location);\n        }\n        if (isNaN(sr.Docket)) {\n          invalid(\" Invalid Docket Format\");\n        } else if (!docket_set.has(parseInt(sr.Docket))) {\n          console.log('docket not found');\n          invalid(\" Docket Not Found\");\n        } else if (sr.Status === 'Rejected') {\n          reject();\n        } else if (!location_set.has(sr.Location) || sr.Location === 'TEST') {\n          invalid(\" Invalid Location\");\n        } else if (sr.Diameter < 16 || sr.Diameter > 50 || isNaN(sr.Diameter)) {\n          invalid(' Diameter out of range or NaN');\n        } else if (!len_set.has(sr.Length.toString())) {\n          invalid(\" Invalid Length\", sr.Length);\n        } else if (!grade_set.has(sr.Grade)) {\n          invalid(\" Invalid Grade\");\n        } else {\n          valid();\n        }\n      } else {\n        showAlert(\"Duplicate Log \" + sr.Log.toString(), 'error');\n      }\n      return acc;\n    }, {\n      scale: [],\n      iv_scale: [],\n      reject: []\n    });\n    if (new_Location.size) {\n      const location_data = Array.from(new_Location).map(item => `('${item}','','${new_Location_Added[item]}')`).join(',').replace(/''/g, 'NULL');\n      console.log(\"New Locations\", location_data);\n      Insert_Yard.run({\n        'data': location_data\n      });\n      console.log(\"Inserted Locations\");\n    }\n    if (scale.length > 0) {\n      const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      console.log(data);\n      Insert_VScaling.run({\n        'data': data\n      }).then(() => showAlert(\"Found Valid Scaling Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    if (iv_scale.length > 0) {\n      const idata = iv_scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      console.log(idata);\n      Insert_Invalid_Scaling.run({\n        'data': idata\n      }).then(() => showAlert(\"Found Invalid Scaling Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    if (reject.length > 0) {\n      const rdata = reject.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      console.log(rdata);\n      Insert_Reject_Scaling.run({\n        'data': rdata\n      }).then(() => showAlert(\"Found Reject Scaling Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    Count_Scaling.run();\n  } catch (error) {\n    showAlert(error, 'error');\n  }\n}",
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  try {\n    await Select_Raw_Scaling.run();\n    const scale_data = Select_Raw_Scaling.data;\n    await Logs.run();\n    const log_set = new Set(Logs.data.map(item => item.Log));\n    await Lengths.run();\n    const len_set = new Set(Lengths.data.map(item => item.Lengths));\n    await Dockets.run();\n    const docket_set = new Set(Dockets.data.map(item => item.Docket));\n    await Grade.run();\n    const grade_set = new Set(Grade.data.map(item => item.Grade));\n    await Location.run();\n    const location_set = new Set(Location.data.map(item => item.Location));\n    const new_Location = new Set();\n    const new_Location_Added = {};\n    console.log(\"starting\");\n    const {iv_scale, scale, reject} = scale_data.reduce((acc, sr) => {\n      const invalid = reason => {\n        sr.Reason += reason;\n        acc.iv_scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date, sr.Reason]);\n      };\n      const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n      const reject = () => acc.reject.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Date, sr.Reason]);\n      if (!log_set.has(sr.Log)) {\n        sr.Date = sr.Date.split('-').reverse().join(\"-\");\n        sr.Location = sr.Location.replace(/ /g, '').toUpperCase();\n        sr.Location = sr.Location.substring(0, 4) + \" \" + sr.Location.substring(4);\n        if (!location_set.has(sr.Location) && sr.Location && sr.Location != 'TEST' && sr.Location != 'REJE CTED') {\n          new_Location.add(sr.Location);\n          new_Location_Added[sr.Location] = sr.Date;\n          location_set.add(sr.Location);\n        }\n        if (isNaN(sr.Docket)) {\n          invalid(\" Invalid Docket Format\");\n        } else if (!docket_set.has(parseInt(sr.Docket))) {\n          console.log('docket not found');\n          invalid(\" Docket Not Found\");\n        } else if (sr.Status === 'Rejected') {\n          reject();\n        } else if (!location_set.has(sr.Location) || sr.Location === 'TEST') {\n          invalid(\" Invalid Location\");\n        } else if (sr.Diameter < 16 || sr.Diameter > 50 || isNaN(sr.Diameter)) {\n          invalid(' Diameter out of range or NaN');\n        } else if (!len_set.has(sr.Length.toString())) {\n          invalid(\" Invalid Length\", sr.Length);\n        } else if (!grade_set.has(sr.Grade)) {\n          invalid(\" Invalid Grade\");\n        } else {\n          valid();\n        }\n      } else {\n        showAlert(\"Duplicate Log \" + sr.Log.toString(), 'error');\n      }\n      return acc;\n    }, {\n      scale: [],\n      iv_scale: [],\n      reject: []\n    });\n    if (new_Location.size) {\n      const location_data = Array.from(new_Location).map(item => `('${item}','','${new_Location_Added[item]}')`).join(',').replace(/''/g, 'NULL');\n      console.log(\"New Locations\", location_data);\n      Insert_Yard.run({\n        'data': location_data\n      });\n      console.log(\"Inserted Locations\");\n    }\n    if (scale.length > 0) {\n      const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      console.log(data);\n      Insert_VScaling.run({\n        'data': data\n      }).then(() => showAlert(\"Found Valid Scaling Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    if (iv_scale.length > 0) {\n      const idata = iv_scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      console.log(idata);\n      Insert_Invalid_Scaling.run({\n        'data': idata\n      }).then(() => showAlert(\"Found Invalid Scaling Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    if (reject.length > 0) {\n      const rdata = reject.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      console.log(rdata);\n      Insert_Reject_Scaling.run({\n        'data': rdata\n      }).then(() => showAlert(\"Found Reject Scaling Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    Count_Scaling.run();\n  } catch (error) {\n    showAlert(error, 'error');\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Scaling_Parse_Raw_Scaling.parse_data",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62d9fb875a06d81bded2fe05"
}