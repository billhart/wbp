{
  "unpublishedCollection": {
    "name": "Parse_Invalid_Scaling",
    "pageId": "UploadCSV",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tparse_data: async () => {\n       try {\n\n\t\t\t\t\t await Select_Invalid_Scaling.run();\n\t\t\t\t\t const scale_data = Select_Invalid_Scaling.data;\n\t\t\t\t\t await Select_Dockets.run();\n\t\t\t\t\t const docket_set = new Set(Select_Dockets.data.map(item => item.Docket));\n\t\t\t\t\t await Select_Logs.run();\n\t\t\t\t\t const log_set = new Set(Select_Logs.data.map(item => item.Log));\n\t\t\t\t\t await Select_Grade.run();            \n\t\t\t\t\t const grade_set = new Set(Select_Grade.data.map(item => item.Grade));\n\t\t\t\t\t await Select_Lengths.run();\n\t\t\t\t\t const length_set = new Set(Select_Lengths.data.map(item => item.Lengths));\n\t\t\t\t\t await Select_Location.run();\n\t\t\t\t\t const location_set = new Set(Select_Location.data.map(item => item.Lengths));\n\n\t\t\t\t \tconsole.log(\"starting\")\n\n            const{\n                del_log,\n                scale,\n            } = scale_data.reduce(\n                (acc, sr) => {\n\t\t\t\t\t\t\t\t\t\tconst logs_to_go = () => acc.del_log.push([sr.Log]);\n                    const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n\t\t\t\t\t\t\t\t\t//console.log(sr.Log);\n                    if ( ! log_set.has(sr.Log) ) {\n                        if (sr.Status === 'Rejected') {\n                            del_log();\n                        } else if ( (! location_set.has(sr.Location)) || (sr.Location === 'TEST')) {\n                        } else if (isNaN(sr.Docket)) {\n                        } else if ( ! docket_set.has(parseInt(sr.Docket))) {\n                         } else if ((sr.Diameter <= 16) || (sr.Diameter >= 48) || isNaN(sr.Diameter)) {\n                        } else if ( ! length_set.has(sr.Length) ) {\n                        } else if ( ! (grade_set.has(sr.Grade)) ) {\n                        } else {\n                            valid();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogs_to_go()\n                        }\n                    } else {\n                        logs_to_go.push()\n                    }\n                    return acc;\n                },\n                {\n                    scale: [],\n                    del_log: [],\n                }\n            );\n\n\n            console.log(\"processed\",scale.length,del_log.length);\n\n\t\t\t\t   if (scale.length > 0) {\n\t\t\t\t\t\t const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t Insert_Scaling.run({'data': data})\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Valid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch((error) => showAlert(error,'error'));\n\t\t\t\t\t }\n\t\t\t\t   if (del_log.length > 0) {\n\t\t\t\t\t\t const idata = del_log.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');;\n\t\t\t\t\t\t Delete_Invalid_ScalingRows.run({'data': idata })\n\t\t\t\t\t\t\t .then(() => showAlert(\"Deleted Invalid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch((error) => showAlert(error,'error'));\n\t\t\t\t\t }\n\n\n        } catch (error) {\n            showAlert(error,'error')\n        }\n\t}\n}",
    "variables": []
  },
  "id": "UploadCSV_Parse_Invalid_Scaling",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62d3b4ac5a06d81bded2fcbe"
}