{
  "unpublishedCollection": {
    "name": "Parse_Raw_Scaling",
    "pageId": "UploadCSV",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tparse_data: async () => {\n       try {\n\t\t\t\t \t await Select_Raw_Scaling.run();\n\t\t\t\t   const scale_data = Select_Raw_Scaling.data;\n\t\t\t\t\t await Select_Logs.run();\n\t\t\t\t\t const log_set = new Set(Select_Logs.data.map(item => item.Log));\n\t\t\t\t\t await Select_Lengths.run();\n\t\t\t\t\t const len_set = new Set(Select_Lengths.data.map(item => item.Lengths));\n\t\t\t\t\t await Select_Dockets.run();\n\t\t\t\t\t const docket_set = new Set(Select_Dockets.data.map(item => item.Docket));\n\t\t\t\t\t await Select_Grade.run();\n\t\t\t\t\t const grade_set = new Set(Select_Grade.data.map(item => item.Grade));\n\t\t\t\t\t await Select_Location.run();\n\t\t\t\t\t const location_set = new Set(Select_Location.data.map(item => item.Location));\n\n\n\t\t\t\t\t //console.log(\"starting\");\n\t\t\t\t //console.log(docket_set);\n\n\t\t\t\t\t const{\n\t\t\t\t\t\t iv_scale,\n\t\t\t\t\t\t scale,\n\t\t\t\t\t } = scale_data.reduce(\n\t\t\t\t\t\t (acc, sr) => {\n\t\t\t\t\t\t\t const invalid = reason => {\n\t\t\t\t\t\t\t\t sr.Reason += reason;\n\t\t\t\t\t\t\t\t acc.iv_scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date, sr.Reason]);\n\t\t\t\t\t\t\t };\n\t\t\t\t\t\t\t const valid = () => acc.scale.push([sr.Log, sr.Docket, sr.Grade, sr.Length, sr.Diameter, sr.JAS, sr.Location, sr.Date]);\n\t\t\t\t\t\t\t //console.log(sr.Docket);\n\t\t\t\t\t\t\t if ( ! log_set.has(sr.Log) ) {\n\t\t\t\t\t\t\t\t sr.Date = sr.Date.split('-').reverse().join(\"-\");\n\t\t\t\t\t\t\t\t sr.Location = sr.Location.replace(/ /g,'').toUpperCase();\n\t\t\t\t\t\t\t\t sr.Location = sr.Location.substring(0,4) + \" \" + sr.Location.substring(4);\n\t\t\t\t\t\t\t\t //console.log(sr.Date);\n\t\t\t\t\t\t\t\t if (sr.Status === 'Rejected') {\n\t\t\t\t\t\t\t\t\t //console.log(\"rejected\");\n\t\t\t\t\t\t\t\t\t invalid()\n\t\t\t\t\t\t\t\t } else if ( (! location_set.has(sr.Location)) || (sr.Location === 'TEST')) {\n\t\t\t\t\t\t\t\t\t //console.log(\"location\");\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Location\")\n\t\t\t\t\t\t\t\t } else if (isNaN(sr.Docket)) {\n\t\t\t\t\t\t\t\t\t //console.log(\"docket format\");\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Docket Format\")\n\t\t\t\t\t\t\t\t } else if ( ! docket_set.has(parseInt(sr.Docket))) {\n\t\t\t\t\t\t\t\t\t //console.log(sr.Docket);\n\t\t\t\t\t\t\t\t\t //console.log('docket not found');\n\t\t\t\t\t\t\t\t\t invalid(\" Docket Not Found\")\n\t\t\t\t\t\t\t\t } else if ((sr.Diameter <= 16) || (sr.Diameter >= 48) || isNaN(sr.Diameter)) {\n\t\t\t\t\t\t\t\t\t //console.log(\"Diameter\")\n\t\t\t\t\t\t\t\t\t invalid(' Diameter out of range or NaN')\n\t\t\t\t\t\t\t\t } else if ( ! len_set.has(sr.Length) ) {\n\t\t\t\t\t\t\t\t\t //console.log(\"Lenght\")\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Length\")\n\t\t\t\t\t\t\t\t } else if ( ! (grade_set.has(sr.Grade)) ) {\n\t\t\t\t\t\t\t\t\t //console.log(\"grade\")\n\t\t\t\t\t\t\t\t\t invalid(\" Invalid Grade\")\n\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t //console.log(\"valid\");\n\t\t\t\t\t\t\t\t\t valid()\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t showAlert(\"Duplicate Log \" + sr.Log.toString(),'error');\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t return acc;\n\t\t\t\t\t\t },\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t scale: [],\n\t\t\t\t\t\t\t iv_scale: [],\n\t\t\t\t\t\t }\n\t\t\t\t\t );\n\t\t\t\t\t //console.log(\"finished processing\");\n\n\n\t\t\t\t\t //console.log(iv_scale_data);\n\t\t\t\t   if (scale.length > 0) {\n\t\t\t\t\t\t const data = scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t Insert_Scaling.run({'data': data})\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Valid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch((error) => showAlert(error,'error'));\n\t\t\t\t\t }\n\t\t\t\t   if (iv_scale.length > 0) {\n\t\t\t\t\t\t const idata = iv_scale.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t Insert_Invalid_Scaling.run({'data': idata })\n\t\t\t\t\t\t\t .then(() => showAlert(\"Found Invalid Scaling Entires\",'success'))\n\t\t\t\t\t\t\t .catch((error) => showAlert(error,'error'));\n\t\t\t\t\t }\n\n\t\t\t\t } catch (error) {\n\t\t\t\t\t showAlert(error,'error')\n\t\t\t\t }\n\t}\n}",
    "variables": []
  },
  "id": "UploadCSV_Parse_Raw_Scaling",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62ce69075a06d81bded2fc3b"
}