{
  "unpublishedCollection": {
    "name": "Parse_Raw_WeighBridge",
    "pageId": "WeighBridge",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\t\tload_data: async () => {\n\t\tconsole.log(\"queries on the bus\");\n\t\tawait Select_Raw_WeighBridge.clear();\n\t\tawait Select_Raw_WeighBridge.run();\n\t\treturn 'success'\n  },\n\treload_tables: async () => {\n\t\tconsole.log('reloading tables');\n\t\tawait WB_Select.run();\n\t\tawait IW_Select.run();\n\t\tCount_Rows.run();\n\t\treturn 'success'\n\t},\n\tload_docketids: async () => {\n\t\tconsole.log('loading log ids');\n\t\tawait Dockets.clear();\n\t\tawait Dockets.run();\n\t},\n\tparse_data: async () => {\n\t\t\t\t//console.log(\"starting\");\n        try {\n\t\t\t\t\t//console.log(\"getting data\");\n\t\t\t\t\t\t\n            const wb_data = Select_Raw_WeighBridge.data;\n\t\t\t\t\t//console.log(\"wb\");\n            const Len_set = new Set(Lengths.data.map(item => item.Lengths));\n\t\t\t\t\t//console.log(\"ls\");\n            const Docket_set = new Set(Dockets.data.map(item => item.Docket));\n\t\t\t\t\t//console.log(\"ds\");\n            const Supplier_set = new Set(Supplier.data.map(item => item.Supplier));\n\t\t\t\t\t//console.log(\"ss\");\n\t\t\t\t\t\tconst Operations_set = new Set(Operations.data.map(item => item.Operations));\n\t\t\t\t\t//console.log(\"os\");\n            const Harvestor_set = new Set(Harvestor.data.map(item => item.Harvestor));\n\t\t\t\t\t//console.log(\"hs\");\n            const Coupe_set = new Set(Coupe.data.map(item => item.Coupe));\n\t\t\t\t\t//console.log(\"cs\");\n            const Grade_set = new Set(Grade.data.map(item => item.Grade));\n\t\t\t\t\t//console.log(\"gs\");\n\t\t\t\t\t  const FPP_set = new Set(FPP.data.map(item => item.FPP));\n\n            const new_Harvestor = new Set();\n            const new_Operations = new Set();\n            const new_Supplier = new Set();\n\t\t\t\t\t  const new_Operations_Date = {};\n            const new_Coupe = new Set();\n\t\t\t\t\t  const new_Coupe_Date = {};\n\t\t\t\t\t  const new_Dockets = new Set();\n\t\t\t\t\t  const new_FPP = new Set();\n\t\t\t\t\t  const new_FPPExpiry = {};\n\n\t\t\t\t\t\t//console.log(\"got data\");\n\n\t\t\t\t\t\tconst WeighBridgeCreator = (WB_Docket, Docket, DateTime, Rego, Supplier, Operations, Coupe, Harvestor, Gross, Tare, GMT, Product, FPP, ExpiryDate) => {\n\t\t\t\t\t\t\tconst product = Product.replace(/\\s/g, '').toUpperCase().split('-');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst docketData = {\n\t\t\t\t\t\t\t\tDocket,\n\t\t\t\t\t\t\t\tWB_Docket,\n\t\t\t\t\t\t\t\tDate: DateTime.split(' ')[0].split('/').reverse().join(\"-\"),\n\t\t\t\t\t\t\t\tTime: DateTime.split(' ')[1] + \":00\",\n\t\t\t\t\t\t\t\tSupplier: Supplier.toUpperCase().replace(/\\s/g, ''),\n\t\t\t\t\t\t\t\tOperation: Operations.toUpperCase().replace(/\\s/g, ''),\n\t\t\t\t\t\t\t\tCoupe: Coupe.toUpperCase().replace(/\\s/g, ''),\n\t\t\t\t\t\t\t\tRego: Rego.toUpperCase().trim().split(/[\\s\\\\-]/)[0],\n\t\t\t\t\t\t\t\tHarvestor: Harvestor.toUpperCase().trim().replace(/\\/|\\\\/g,'').replace(/\\s\\s+/g, ' ').replace(/HA /g,'HA / '),\n\t\t\t\t\t\t\t\tReason: '',\n\t\t\t\t\t\t\t\tGross: Gross / 1000,\n\t\t\t\t\t\t\t\tTare: Tare / 1000,\n\t\t\t\t\t\t\t\tGMT: GMT / 1000,\n\t\t\t\t\t\t\t\tFPP,\n\t\t\t\t\t\t\t\tExpiry: ExpiryDate.split(' ')[0].split('/').reverse().join(\"-\"),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\tif (product.length === 2) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...docketData,\n\t\t\t\t\t\t\t\t\tGrade: product[0],\n\t\t\t\t\t\t\t\t\tLength: isNaN(product[1]) ? 0 : product[1],\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...docketData,\n\t\t\t\t\t\t\t\tGrade: Product,\n\t\t\t\t\t\t\t\tLength: 0,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//console.log(\"starting processing\");\n\t\t\t\t\t\t\n            const{\n                iv_wb,\n                wb,\n            } = wb_data.reduce(\n                (acc, sr) => {\n                    const wbr = WeighBridgeCreator(sr.DOCKETNO, sr.MANUALDOCKETNO, sr.TRANSDATE, sr.REGISTRATIONNO, sr.CONTACTNAME, sr.INSTRUCTIONS1, sr.ORDERNO, \n                        sr.INSTRUCTIONS2, sr.GROSS, sr.TARE, sr.NET, sr.PRODUCT, sr.STREETNUMBER, sr.STREET);\n                    const invalid = reason => {\n                        wbr.Reason += reason;\n\t\t\t\t\t\t\t\t\t\t\t  //console.log(\"Invalid :\",wbr.Reason);\n                        acc.iv_wb.push([wbr.WB_Docket, wbr.Docket, wbr.Date, wbr.Rego, wbr.Supplier, wbr.Operation, wbr.Coupe, wbr.Harvestor, wbr.FPP,\n                            wbr.Gross, wbr.Tare, wbr.GMT, wbr.Grade, wbr.Length, wbr.Time, wbr.Reason]);\n                    };\n                    const valid = () => acc.wb.push([wbr.Docket, wbr.WB_Docket, wbr.Date, wbr.Rego, wbr.Supplier, wbr.Operation, wbr.Coupe, wbr.Harvestor, wbr.FPP, \n                                                    wbr.Gross, wbr.Tare, wbr.GMT, wbr.Grade, wbr.Length]);\n\t\t\t\t\t\t\t\t\t\t\n                    if ( ! Coupe_set.has(wbr.Coupe) &&  wbr.Coupe && (wbr.Coupe != 'TEST')) { \n\t\t\t\t\t\t\t\t\t\t\t//console.log(wbr.Coupe,wbr.Date);\n\t\t\t\t\t\t\t\t\t\t\tnew_Coupe.add(wbr.Coupe);\n\t\t\t\t\t\t\t\t\t\t\tnew_Coupe_Date[wbr.Coupe] = wbr.Date;\n\t\t\t\t\t\t\t\t\t\t}\n                    if ( ! Operations_set.has(wbr.Operation) && wbr.Operation && wbr.Operation != 'TEST' ) {\n\t\t\t\t\t\t\t\t\t\t\t//console.log(wbr.Operation,wbr.Date);\n\t\t\t\t\t\t\t\t\t\t\tnew_Operations.add(wbr.Operation);\n\t\t\t\t\t\t\t\t\t\t\tnew_Operations_Date[wbr.Operation] = wbr.Date;\n\t\t\t\t\t\t\t\t\t\t}\n                    if ( ! Harvestor_set.has(wbr.Harvestor) && wbr.Harvestor && wbr.Harvestor != 'TEST') new_Harvestor.add(wbr.Harvestor);\n                    if ( ! Supplier_set.has(wbr.Supplier) && wbr.Supplier && wbr.Supplier != 'TEST') new_Supplier.add(wbr.Supplier);\n\t\t\t\t\t\t\t\t\t  if ( ! FPP_set.has(wbr.FPP) && wbr.FPP && wbr.FPP != 'TEST' && wbr.FPP != \"18-34\") {\n\t\t\t\t\t\t\t\t\t\t\tnew_FPP.add(wbr.FPP);\n\t\t\t\t\t\t\t\t\t\t\tnew_FPPExpiry[wbr.FPP] = wbr.Expiry;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//console.log(wbr.Docket);\n\t\t\t\t\t\t\t\t\t  if ( acc.wb.length > 0 && acc.wb[acc.wb.length - 1][0] === wbr.Docket ) {\n\t\t\t\t\t\t\t\t\t\t\tconst n = acc.wb.length - 1;\n\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Rear Load Found\",acc.wb[n][8]);\n\t\t\t\t\t\t\t\t\t\t\tacc.wb[n][9] = wbr.Gross + acc.wb[n][9];\n\t\t\t\t\t\t\t\t\t\t\tacc.wb[n][10] = wbr.Tare + acc.wb[n][10];\n\t\t\t\t\t\t\t\t\t\t\tacc.wb[n][11] = wbr.GMT + acc.wb[n][11];\n\t\t\t\t\t\t\t\t\t\t} else if ( acc.iv_wb.length > 0 && acc.wb[acc.iv_wb.length - 1][0] === wbr.Docket ) {\n\t\t\t\t\t\t\t\t\t\t\tconst n = acc.iv_wb.length - 1;\n\t\t\t\t\t\t\t\t\t\t\tacc.iv_wb[n][9] = wbr.Gross + acc.iv_wb[n][10];\n\t\t\t\t\t\t\t\t\t\t\tacc.iv_wb[n][10] = wbr.Tare + acc.iv_wb[n][11];\n\t\t\t\t\t\t\t\t\t\t\tacc.iv_wb[n][11] = wbr.GMT + acc.iv_wb[n][12];\n\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Invalid Rear Load Found\");\n\t\t\t\t\t\t\t\t\t\t} else if ( ! Docket_set.has(wbr.Docket) ) {\n\t\t\t\t\t\t\t\t\t\t\t  if ( new_Dockets.has(wbr.Docket )) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tinvalid(\" Duplicate Docket - only added first instance\");\n\t\t\t\t\t\t\t\t\t\t\t\t} else if ( (isNaN(wbr.Docket)) || (wbr.Docket < 9999) || (wbr.Docket > 9999999 )) {\n                            invalid(\" Check Docket Number \");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(wbr.Docket);\n                        } else if ( (wbr.Coupe === 'TEST') || (wbr.Supplier === 'TEST' ) || (wbr.Harvestor === 'TEST') || (wbr.Operation === 'TEST' || wbr.FPP === 'TEST')) {\n                            invalid(\" Contains Test Values\");\n\t\t\t\t\t\t\t\t\t\t\t\t} else if ( ! wbr.Coupe || ! wbr.Supplier || ! wbr.Harvestor || ! wbr.Operation || ! wbr.FPP || wbr.FPP === \"18-34\") {\n                            invalid(\" Contains Null Values\");\n\t\t\t\t\t\t\t\t\t\t\t\t} else if ( ! wbr.GMT || ! wbr.Tare || ! wbr.Gross ) {\n                            invalid(\" Contains Null Weight Values\");\n                        } else if ( ! Grade_set.has(wbr.Grade)) {\n                            invalid(\" Check Grade and add to Grades Table if valid\");\n                        } else if ( ! Len_set.has(wbr.Length)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(wbr.Length,Len_set);\n                            invalid(\" Check Length and add to Lengths Table if valid\");\n                        } else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t  //console.log(\"Valid\");\n                            valid();\n\t\t\t\t\t\t\t\t\t\t\t\t\t  new_Dockets.add(wbr.Docket);\n                        }\n                    } else {\n                        showAlert(\"Duplicate Docket - Ignoring\" + wbr.Docket.toString(),'error');\n                    }\n                    return acc;\n                },\n                {\n                    wb: [],\n                    iv_wb: [],\n                }\n            );\n\t\t\t\t\t\n\t\t\t\t\t//console.log('finished raw processing')\n\t\t\t\t\tif (new_Coupe.size) {\n                const coupe_data = Array.from(new_Coupe).map(item => `('${item}','${new_Coupe_Date[item]}')`).join(',');\n\t\t\t\t\t\t\t  console.log(\"New Coupe: \",coupe_data);\n                await Insert_Coupe.run({'data': coupe_data});\n\t\t\t\t\t\t \t\tawait Coupe.clear();\n\t\t\t\t\t\t\t  await Coupe.run();\n            }\n            if (new_Operations.size) {\n                const operation_data = Array.from(new_Operations).map(item => `('${item}','${new_Operations_Date[item]}')`).join(',');\n\t\t\t\t\t\t\t  console.log(\"New Operation: \",operation_data);\n                await Insert_Operations.run({'data': operation_data});\n\t\t\t\t\t\t\t  await Operations.clear();\n\t\t\t\t\t\t\t  await Operations.run();\n            }\n            if (new_Harvestor.size) {\n                const harvestor_data = Array.from(new_Harvestor).map(item => `('${item}')`).join(',');\n\t\t\t\t\t\t\t\tconsole.log(\"New Harvestor: \",harvestor_data);\n                await Insert_Harvestor.run({'data': harvestor_data});\n\t\t\t\t\t\t\t  await Harvestor.clear();\n\t\t\t\t\t\t\t\tawait Harvestor.run();\n            }\n            if (new_Supplier.size) {\n                const supplier_data = Array.from(new_Supplier).map(item => `('${item}')`).join(',');\n\t\t\t\t\t\t\t  console.log(\"New Supplier\",supplier_data);\t\t\t\t\t\t\t\n                await Insert_Supplier.run({'data': supplier_data});\n\t\t\t\t\t\t\t  await Supplier.clear();\n\t\t\t\t\t\t\t  await Supplier.run();\n\n            }\n\t\t\t\t\t  if (new_FPP.size) {\n                const fpp_data = Array.from(new_FPP).map(item => `('${item}','${new_FPPExpiry[item]}')`).join(',').replace(/''/g,'NULL');\n\t\t\t\t\t\t\t  console.log(\"New FPP\",fpp_data);\t\t\t\t\t\t\t\n                await Insert_FPP.run({'data': fpp_data});\n\t\t\t\t\t\t\t  await FPP.clear();\n\t\t\t\t\t\t\t  await FPP.run();\n\n            }\n\n\t\t\t\t\t\tconsole.log('inserting');\n\t\t\t\t\t  if (wb.length > 0) {\n\t\t\t\t\t\t\tconst data = wb.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t\tawait Insert_WeighBridge.run({'data': data})\n\t\t\t\t\t\t\t\t.then(() => showAlert(\"Found Valid WeighBridge Entires\",'success'))\n\t\t\t\t\t\t\t\t.catch((error) => showAlert(error,'error'));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t  if (iv_wb.length > 0 ) {\n\t\t\t\t\t\t\tconst idata = iv_wb.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n\t\t\t\t\t\t\tawait Insert_Invalid_WeighBridge.run({'data': idata })\n\t\t\t\t\t\t\t\t.then(() => showAlert(\"Found Invalid WeighBridge Entires\",'success'))\n\t\t\t\t\t\t\t\t.catch((error) => showAlert(error,'error'));\n\t\t\t\t\t\t}\n\n            //console.Docket(iv_wb_data);\n        } catch (error) {\n            showAlert(error,'error')\n        }\n\t}\n}",
    "variables": []
  },
  "id": "WeighBridge_Parse_Raw_WeighBridge",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62dd06505a06d81bded2feb7"
}