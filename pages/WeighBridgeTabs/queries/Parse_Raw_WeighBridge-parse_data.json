{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "parse_data",
    "fullyQualifiedName": "Parse_Raw_WeighBridge.parse_data",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "WeighBridgeTabs",
    "collectionId": "WeighBridgeTabs_Parse_Raw_WeighBridge",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  try {\n    await Select_Raw_WeighBridge.run();\n    await Lengths.run();\n    await Dockets.run();\n    await Supplier.run();\n    await Operations.run();\n    await Harvestor.run();\n    await Coupe.run();\n    await Grade.run();\n    await FPP.run();\n    const wb_data = Select_Raw_WeighBridge.data;\n    const Len_set = new Set(Lengths.data.map(item => item.Lengths));\n    const Docket_set = new Set(Dockets.data.map(item => item.Docket));\n    const Supplier_set = new Set(Supplier.data.map(item => item.Supplier));\n    const Operations_set = new Set(Operations.data.map(item => item.Operations));\n    const Harvestor_set = new Set(Harvestor.data.map(item => item.Harvestor));\n    const Coupe_set = new Set(Coupe.data.map(item => item.Coupe));\n    const Grade_set = new Set(Grade.data.map(item => item.Grade));\n    const FPP_set = new Set(FPP.data.map(item => item.FPP));\n    const new_Harvestor = new Set();\n    const new_Operations = new Set();\n    const new_Supplier = new Set();\n    const new_Coupe = new Set();\n    const new_Dockets = new Set();\n    const new_FPP = new Set();\n    const new_FPPExpiry = {};\n    console.log(\"got data\");\n    const WeighBridgeCreator = (WB_Docket, Docket, DateTime, Rego, Supplier, Operations, Coupe, Harvestor, Gross, Tare, GMT, Product, FPP, ExpiryDate) => {\n      const product = Product.replace(/\\s/g, '').toUpperCase().split('-');\n      const docketData = {\n        Docket,\n        WB_Docket,\n        Date: DateTime.split(' ')[0].split('/').reverse().join(\"-\"),\n        Time: DateTime.split(' ')[1] + \":00\",\n        Supplier: Supplier.toUpperCase().replace(/\\s/g, ''),\n        Operation: Operations.toUpperCase().replace(/\\s/g, ''),\n        Coupe: Coupe.toUpperCase().replace(/\\s/g, ''),\n        Rego: Rego.toUpperCase().trim().split(/[\\s\\\\-]/)[0],\n        Harvestor: Harvestor.toUpperCase().trim().replace(/\\/|\\\\/g, '').replace(/\\s\\s+/g, ' ').replace(/HA /g, 'HA / '),\n        Reason: '',\n        Gross: Gross / 1000,\n        Tare: Tare / 1000,\n        GMT: GMT / 1000,\n        FPP,\n        Expiry: ExpiryDate.split(' ')[0].split('/').reverse().join(\"-\")\n      };\n      if (product.length === 2) {\n        return {\n          ...docketData,\n          Grade: product[0],\n          Length: isNaN(parseFloat(product[1])) ? 0 : parseFloat(product[1])\n        };\n      }\n      return {\n        ...docketData,\n        Grade: Product,\n        Length: 0\n      };\n    };\n    const {iv_wb, wb} = wb_data.reduce((acc, sr) => {\n      const wbr = WeighBridgeCreator(sr.DOCKETNO, sr.MANUALDOCKETNO, sr.TRANSDATE, sr.REGISTRATIONNO, sr.CONTACTNAME, sr.INSTRUCTIONS1, sr.ORDERNO, sr.INSTRUCTIONS2, sr.GROSS, sr.TARE, sr.NET, sr.PRODUCT, sr.STREETNUMBER, sr.STREET);\n      const invalid = reason => {\n        wbr.Reason += reason;\n        acc.iv_wb.push([wbr.WB_Docket, wbr.Docket, wbr.Date, wbr.Rego, wbr.Supplier, wbr.Operation, wbr.Coupe, wbr.Harvestor, wbr.FPP, wbr.Gross, wbr.Tare, wbr.GMT, wbr.Grade, wbr.Length, wbr.Time, wbr.Reason]);\n      };\n      const valid = () => acc.wb.push([wbr.Docket, wbr.WB_Docket, wbr.Date, wbr.Rego, wbr.Supplier, wbr.Operation, wbr.Coupe, wbr.Harvestor, wbr.FPP, wbr.Gross, wbr.Tare, wbr.GMT, wbr.Grade, wbr.Length]);\n      if (!Coupe_set.has(wbr.Coupe) && wbr.Coupe && wbr.Coupe != 'TEST') new_Coupe.add(wbr.Coupe);\n      if (!Operations_set.has(wbr.Operation) && wbr.Operation && wbr.Operation != 'TEST') new_Operations.add(wbr.Operation);\n      if (!Harvestor_set.has(wbr.Harvestor) && wbr.Harvestor && wbr.Harvestor != 'TEST') new_Harvestor.add(wbr.Harvestor);\n      if (!Supplier_set.has(wbr.Supplier) && wbr.Supplier && wbr.Supplier != 'TEST') new_Supplier.add(wbr.Supplier);\n      if (!FPP_set.has(wbr.FPP) && wbr.FPP && wbr.FPP != 'TEST' && wbr.FPP != \"18-34\") {\n        new_FPP.add(wbr.FPP);\n        new_FPPExpiry[wbr.FPP] = wbr.Expiry;\n      }\n      if (acc.wb.length > 0 && acc.wb[acc.wb.length - 1][0] === wbr.Docket) {\n        const n = acc.wb.length - 1;\n        acc.wb[n][9] = wbr.Gross + acc.wb[n][9];\n        acc.wb[n][10] = wbr.Tare + acc.wb[n][10];\n        acc.wb[n][11] = wbr.GMT + acc.wb[n][11];\n      } else if (acc.iv_wb.length > 0 && acc.wb[acc.iv_wb.length - 1][0] === wbr.Docket) {\n        const n = acc.iv_wb.length - 1;\n        acc.iv_wb[n][9] = wbr.Gross + acc.iv_wb[n][10];\n        acc.iv_wb[n][10] = wbr.Tare + acc.iv_wb[n][11];\n        acc.iv_[n][11] = wbr.GMT + acc.iv_wb[n][12];\n      } else if (!Docket_set.has(wbr.Docket)) {\n        if (new_Dockets.has(wbr.Docket)) {\n          invalid(\" Duplicate Docket - only added first instance\");\n        } else if (isNaN(wbr.Docket) || wbr.Docket < 9999 || wbr.Docket > 9999999) {\n          invalid(\" Check Docket Number \");\n        } else if (wbr.Coupe === 'TEST' || wbr.Supplier === 'TEST' || wbr.Harvestor === 'TEST' || (wbr.Operation === 'TEST' || wbr.FPP === 'TEST')) {\n          invalid(\" Contains Test Values\");\n        } else if (!wbr.Coupe || !wbr.Supplier || !wbr.Harvestor || !wbr.Operation || !wbr.FPP || wbr.FPP === \"18-34\") {\n          invalid(\" Contains Null Values\");\n        } else if (!wbr.GMT || !wbr.Tare || !wbr.Gross) {\n          invalid(\" Contains Null Weight Values\");\n        } else if (!Grade_set.has(wbr.Grade)) {\n          invalid(\" Check Grade and add to Grades Table if valid\");\n        } else if (!Len_set.has(wbr.Length)) {\n          invalid(\" Check Length and add to Lengths Table if valid\");\n        } else {\n          valid();\n          new_Dockets.add(wbr.Docket);\n        }\n      } else {\n        showAlert(\"Duplicate Docket - Ignoring\" + wbr.Docket.toString(), 'error');\n      }\n      return acc;\n    }, {\n      wb: [],\n      iv_wb: []\n    });\n    console.log('finished raw processing');\n    if (new_Coupe.size) {\n      const coupe_data = Array.from(new_Coupe).map(item => `('${item}')`).join(',');\n      console.log(\"New Coupe: \", coupe_data);\n      Insert_Coupe.run({\n        'data': coupe_data\n      });\n    }\n    if (new_Operations.size) {\n      const operation_data = Array.from(new_Operations).map(item => `('${item}')`).join(',');\n      console.log(\"New Operation: \", operation_data);\n      Insert_Operations.run({\n        'data': operation_data\n      });\n    }\n    if (new_Harvestor.size) {\n      const harvestor_data = Array.from(new_Harvestor).map(item => `('${item}')`).join(',');\n      console.log(\"New Harvestor: \", harvestor_data);\n      Insert_Harvestor.run({\n        'data': harvestor_data\n      });\n    }\n    if (new_Supplier.size) {\n      const supplier_data = Array.from(new_Supplier).map(item => `('${item}')`).join(',');\n      console.log(\"New Supplier\", supplier_data);\n      Insert_Supplier.run({\n        'data': supplier_data\n      });\n    }\n    if (new_FPP.size) {\n      const fpp_data = Array.from(new_FPP).map(item => `('${item}','${new_FPPExpiry[item]}')`).join(',').replace(/''/g, 'NULL');\n      console.log(\"New FPP\", fpp_data);\n      Insert_FPP.run({\n        'data': fpp_data\n      });\n    }\n    console.log('inserting');\n    if (wb.length > 0) {\n      const data = wb.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      Insert_WeighBridge.run({\n        'data': data\n      }).then(() => showAlert(\"Found Valid WeighBridge Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    if (iv_wb.length > 0) {\n      const idata = iv_wb.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      Insert_Invalid_WeighBridge.run({\n        'data': idata\n      }).then(() => showAlert(\"Found Invalid WeighBridge Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    await WB_Select.run();\n    await IW_Select.run();\n    Count_Rows.run();\n  } catch (error) {\n    showAlert(error, 'error');\n  }\n}",
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  try {\n    await Select_Raw_WeighBridge.run();\n    await Lengths.run();\n    await Dockets.run();\n    await Supplier.run();\n    await Operations.run();\n    await Harvestor.run();\n    await Coupe.run();\n    await Grade.run();\n    await FPP.run();\n    const wb_data = Select_Raw_WeighBridge.data;\n    const Len_set = new Set(Lengths.data.map(item => item.Lengths));\n    const Docket_set = new Set(Dockets.data.map(item => item.Docket));\n    const Supplier_set = new Set(Supplier.data.map(item => item.Supplier));\n    const Operations_set = new Set(Operations.data.map(item => item.Operations));\n    const Harvestor_set = new Set(Harvestor.data.map(item => item.Harvestor));\n    const Coupe_set = new Set(Coupe.data.map(item => item.Coupe));\n    const Grade_set = new Set(Grade.data.map(item => item.Grade));\n    const FPP_set = new Set(FPP.data.map(item => item.FPP));\n    const new_Harvestor = new Set();\n    const new_Operations = new Set();\n    const new_Supplier = new Set();\n    const new_Coupe = new Set();\n    const new_Dockets = new Set();\n    const new_FPP = new Set();\n    const new_FPPExpiry = {};\n    console.log(\"got data\");\n    const WeighBridgeCreator = (WB_Docket, Docket, DateTime, Rego, Supplier, Operations, Coupe, Harvestor, Gross, Tare, GMT, Product, FPP, ExpiryDate) => {\n      const product = Product.replace(/\\s/g, '').toUpperCase().split('-');\n      const docketData = {\n        Docket,\n        WB_Docket,\n        Date: DateTime.split(' ')[0].split('/').reverse().join(\"-\"),\n        Time: DateTime.split(' ')[1] + \":00\",\n        Supplier: Supplier.toUpperCase().replace(/\\s/g, ''),\n        Operation: Operations.toUpperCase().replace(/\\s/g, ''),\n        Coupe: Coupe.toUpperCase().replace(/\\s/g, ''),\n        Rego: Rego.toUpperCase().trim().split(/[\\s\\\\-]/)[0],\n        Harvestor: Harvestor.toUpperCase().trim().replace(/\\/|\\\\/g, '').replace(/\\s\\s+/g, ' ').replace(/HA /g, 'HA / '),\n        Reason: '',\n        Gross: Gross / 1000,\n        Tare: Tare / 1000,\n        GMT: GMT / 1000,\n        FPP,\n        Expiry: ExpiryDate.split(' ')[0].split('/').reverse().join(\"-\")\n      };\n      if (product.length === 2) {\n        return {\n          ...docketData,\n          Grade: product[0],\n          Length: isNaN(parseFloat(product[1])) ? 0 : parseFloat(product[1])\n        };\n      }\n      return {\n        ...docketData,\n        Grade: Product,\n        Length: 0\n      };\n    };\n    const {iv_wb, wb} = wb_data.reduce((acc, sr) => {\n      const wbr = WeighBridgeCreator(sr.DOCKETNO, sr.MANUALDOCKETNO, sr.TRANSDATE, sr.REGISTRATIONNO, sr.CONTACTNAME, sr.INSTRUCTIONS1, sr.ORDERNO, sr.INSTRUCTIONS2, sr.GROSS, sr.TARE, sr.NET, sr.PRODUCT, sr.STREETNUMBER, sr.STREET);\n      const invalid = reason => {\n        wbr.Reason += reason;\n        acc.iv_wb.push([wbr.WB_Docket, wbr.Docket, wbr.Date, wbr.Rego, wbr.Supplier, wbr.Operation, wbr.Coupe, wbr.Harvestor, wbr.FPP, wbr.Gross, wbr.Tare, wbr.GMT, wbr.Grade, wbr.Length, wbr.Time, wbr.Reason]);\n      };\n      const valid = () => acc.wb.push([wbr.Docket, wbr.WB_Docket, wbr.Date, wbr.Rego, wbr.Supplier, wbr.Operation, wbr.Coupe, wbr.Harvestor, wbr.FPP, wbr.Gross, wbr.Tare, wbr.GMT, wbr.Grade, wbr.Length]);\n      if (!Coupe_set.has(wbr.Coupe) && wbr.Coupe && wbr.Coupe != 'TEST') new_Coupe.add(wbr.Coupe);\n      if (!Operations_set.has(wbr.Operation) && wbr.Operation && wbr.Operation != 'TEST') new_Operations.add(wbr.Operation);\n      if (!Harvestor_set.has(wbr.Harvestor) && wbr.Harvestor && wbr.Harvestor != 'TEST') new_Harvestor.add(wbr.Harvestor);\n      if (!Supplier_set.has(wbr.Supplier) && wbr.Supplier && wbr.Supplier != 'TEST') new_Supplier.add(wbr.Supplier);\n      if (!FPP_set.has(wbr.FPP) && wbr.FPP && wbr.FPP != 'TEST' && wbr.FPP != \"18-34\") {\n        new_FPP.add(wbr.FPP);\n        new_FPPExpiry[wbr.FPP] = wbr.Expiry;\n      }\n      if (acc.wb.length > 0 && acc.wb[acc.wb.length - 1][0] === wbr.Docket) {\n        const n = acc.wb.length - 1;\n        acc.wb[n][9] = wbr.Gross + acc.wb[n][9];\n        acc.wb[n][10] = wbr.Tare + acc.wb[n][10];\n        acc.wb[n][11] = wbr.GMT + acc.wb[n][11];\n      } else if (acc.iv_wb.length > 0 && acc.wb[acc.iv_wb.length - 1][0] === wbr.Docket) {\n        const n = acc.iv_wb.length - 1;\n        acc.iv_wb[n][9] = wbr.Gross + acc.iv_wb[n][10];\n        acc.iv_wb[n][10] = wbr.Tare + acc.iv_wb[n][11];\n        acc.iv_[n][11] = wbr.GMT + acc.iv_wb[n][12];\n      } else if (!Docket_set.has(wbr.Docket)) {\n        if (new_Dockets.has(wbr.Docket)) {\n          invalid(\" Duplicate Docket - only added first instance\");\n        } else if (isNaN(wbr.Docket) || wbr.Docket < 9999 || wbr.Docket > 9999999) {\n          invalid(\" Check Docket Number \");\n        } else if (wbr.Coupe === 'TEST' || wbr.Supplier === 'TEST' || wbr.Harvestor === 'TEST' || (wbr.Operation === 'TEST' || wbr.FPP === 'TEST')) {\n          invalid(\" Contains Test Values\");\n        } else if (!wbr.Coupe || !wbr.Supplier || !wbr.Harvestor || !wbr.Operation || !wbr.FPP || wbr.FPP === \"18-34\") {\n          invalid(\" Contains Null Values\");\n        } else if (!wbr.GMT || !wbr.Tare || !wbr.Gross) {\n          invalid(\" Contains Null Weight Values\");\n        } else if (!Grade_set.has(wbr.Grade)) {\n          invalid(\" Check Grade and add to Grades Table if valid\");\n        } else if (!Len_set.has(wbr.Length)) {\n          invalid(\" Check Length and add to Lengths Table if valid\");\n        } else {\n          valid();\n          new_Dockets.add(wbr.Docket);\n        }\n      } else {\n        showAlert(\"Duplicate Docket - Ignoring\" + wbr.Docket.toString(), 'error');\n      }\n      return acc;\n    }, {\n      wb: [],\n      iv_wb: []\n    });\n    console.log('finished raw processing');\n    if (new_Coupe.size) {\n      const coupe_data = Array.from(new_Coupe).map(item => `('${item}')`).join(',');\n      console.log(\"New Coupe: \", coupe_data);\n      Insert_Coupe.run({\n        'data': coupe_data\n      });\n    }\n    if (new_Operations.size) {\n      const operation_data = Array.from(new_Operations).map(item => `('${item}')`).join(',');\n      console.log(\"New Operation: \", operation_data);\n      Insert_Operations.run({\n        'data': operation_data\n      });\n    }\n    if (new_Harvestor.size) {\n      const harvestor_data = Array.from(new_Harvestor).map(item => `('${item}')`).join(',');\n      console.log(\"New Harvestor: \", harvestor_data);\n      Insert_Harvestor.run({\n        'data': harvestor_data\n      });\n    }\n    if (new_Supplier.size) {\n      const supplier_data = Array.from(new_Supplier).map(item => `('${item}')`).join(',');\n      console.log(\"New Supplier\", supplier_data);\n      Insert_Supplier.run({\n        'data': supplier_data\n      });\n    }\n    if (new_FPP.size) {\n      const fpp_data = Array.from(new_FPP).map(item => `('${item}','${new_FPPExpiry[item]}')`).join(',').replace(/''/g, 'NULL');\n      console.log(\"New FPP\", fpp_data);\n      Insert_FPP.run({\n        'data': fpp_data\n      });\n    }\n    console.log('inserting');\n    if (wb.length > 0) {\n      const data = wb.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      Insert_WeighBridge.run({\n        'data': data\n      }).then(() => showAlert(\"Found Valid WeighBridge Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    if (iv_wb.length > 0) {\n      const idata = iv_wb.map(item => `(${item.map(val => `'${val}'`).join(',')})`).join(',');\n      Insert_Invalid_WeighBridge.run({\n        'data': idata\n      }).then(() => showAlert(\"Found Invalid WeighBridge Entires\", 'success')).catch(error => showAlert(error, 'error'));\n    }\n    await WB_Select.run();\n    await IW_Select.run();\n    Count_Rows.run();\n  } catch (error) {\n    showAlert(error, 'error');\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "WeighBridgeTabs_Parse_Raw_WeighBridge.parse_data",
  "deleted": false,
  "gitSyncId": "62c64eab5a06d81bded2fac9_62dd06505a06d81bded2feb5"
}